
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { FileText, Trash2, Download, Calendar, Eye } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';

// @ts-ignore
import pptxgen from 'pptxgenjs';

interface Presentation {
  id: string;
  title: string;
  content: {
    slides: { title: string; bullets: string[] }[];
  };
  created_at: string;
  updated_at: string;
}

const SavedPresentations = () => {
  const { user } = useAuth();
  const [presentations, setPresentations] = useState<Presentation[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedPresentation, setSelectedPresentation] = useState<Presentation | null>(null);
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);

  useEffect(() => {
    if (user) {
      loadPresentations();
    }
  }, [user]);

  const loadPresentations = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('powerpoint_presentations')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setPresentations(data || []);
    } catch (error) {
      console.error('Error loading presentations:', error);
      toast({
        title: 'Loading Error',
        description: 'Failed to load your presentations.',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const deletePresentation = async (id: string) => {
    try {
      const { error } = await supabase
        .from('powerpoint_presentations')
        .delete()
        .eq('id', id);

      if (error) throw error;

      setPresentations(prev => prev.filter(p => p.id !== id));
      toast({
        title: 'Deleted',
        description: 'Presentation deleted successfully.'
      });
    } catch (error) {
      console.error('Error deleting presentation:', error);
      toast({
        title: 'Delete Error',
        description: 'Failed to delete presentation.',
        variant: 'destructive'
      });
    }
  };

  const downloadPresentation = async (presentation: Presentation) => {
    try {
      const pptxInstance = new pptxgen();
      
      presentation.content.slides.forEach((slide, index) => {
        const slideObj = pptxInstance.addSlide();
        slideObj.background = { fill: 'FFFFFF' };
        
        // Professional header
        slideObj.addShape('rect', { 
          x: 0, y: 0, w: 10, h: 0.5, 
          fill: { type: 'solid', color: '6366F1' }, 
          line: { color: 'FFFFFF', width: 0 } 
        });
        
        slideObj.addText(slide.title, {
          x: 0.5, y: 0.7, w: 9, h: 1,
          fontSize: 28, bold: true, color: '1E293B', 
          align: 'left', fontFace: 'Segoe UI'
        });
        
        // Accent line
        slideObj.addShape('rect', { 
          x: 0.5, y: 1.8, w: 0.1, h: Math.max(0.4 * slide.bullets.length, 3), 
          fill: { color: '6366F1' }, line: { color: 'FFFFFF', width: 0 } 
        });
        
        const bulletStartY = 2.0;
        slide.bullets.forEach((bullet, idx) => {
          slideObj.addText(bullet, {
            x: 0.8, y: bulletStartY + idx * 0.7, w: 8.5, h: 0.6,
            fontSize: 16, color: '334155', fontFace: 'Segoe UI',
            bullet: true, align: 'left'
          });
        });
        
        slideObj.addText('Generated by Neutron AI', {
          x: 0, y: 7.2, w: 10, h: 0.3,
          fontSize: 10, color: '94A3B8', align: 'center', fontFace: 'Segoe UI'
        });
      });
      
      const blob = await pptxInstance.write('blob' as any);
      const realBlob = blob instanceof Blob ? blob : new Blob([blob]);
      const url = URL.createObjectURL(realBlob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `${presentation.title.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_')}.pptx`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast({
        title: 'Downloaded',
        description: 'Presentation downloaded successfully!'
      });
    } catch (error) {
      console.error('Error downloading presentation:', error);
      toast({
        title: 'Download Error',
        description: 'Failed to download presentation.',
        variant: 'destructive'
      });
    }
  };

  const openPreview = (presentation: Presentation) => {
    setSelectedPresentation(presentation);
    setIsPreviewOpen(true);
  };

  if (isLoading) {
    return (
      <Card className="max-w-4xl mx-auto">
        <CardContent className="p-8 text-center">
          <div className="animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p className="text-slate-600">Loading your presentations...</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      <Card className="shadow-lg border-0 bg-gradient-to-r from-indigo-600 to-purple-600 text-white">
        <CardHeader>
          <CardTitle className="flex items-center gap-3 text-2xl">
            <FileText className="w-8 h-8" />
            Your Presentation Library
          </CardTitle>
          <p className="text-indigo-100">
            {presentations.length} saved presentations ready for download
          </p>
        </CardHeader>
      </Card>

      {presentations.length === 0 ? (
        <Card>
          <CardContent className="p-12 text-center">
            <FileText className="w-16 h-16 text-slate-300 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-slate-700 mb-2">No Presentations Yet</h3>
            <p className="text-slate-500">Generate your first presentation to see it here.</p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {presentations.map((presentation) => (
            <Card key={presentation.id} className="shadow-lg hover:shadow-xl transition-all duration-200 border-0 bg-white">
              <CardHeader className="bg-gradient-to-r from-slate-50 to-slate-100 border-b">
                <CardTitle className="text-lg font-bold text-slate-800 line-clamp-2">
                  {presentation.title}
                </CardTitle>
                <div className="flex items-center gap-2 text-sm text-slate-500">
                  <Calendar className="w-4 h-4" />
                  {new Date(presentation.created_at).toLocaleDateString()}
                </div>
              </CardHeader>
              
              <CardContent className="p-4 space-y-4">
                <div className="text-sm text-slate-600">
                  <div className="flex items-center gap-2">
                    <FileText className="w-4 h-4 text-blue-500" />
                    <span>{presentation.content.slides.length} slides</span>
                  </div>
                </div>
                
                <div className="flex gap-2">
                  <Button
                    onClick={() => openPreview(presentation)}
                    variant="outline"
                    size="sm"
                    className="flex-1 border-blue-200 text-blue-700 hover:bg-blue-50"
                  >
                    <Eye className="w-4 h-4 mr-1" />
                    Preview
                  </Button>
                  <Button
                    onClick={() => downloadPresentation(presentation)}
                    size="sm"
                    className="flex-1 bg-green-600 hover:bg-green-700 text-white"
                  >
                    <Download className="w-4 h-4 mr-1" />
                    Download
                  </Button>
                  <Button
                    onClick={() => deletePresentation(presentation.id)}
                    variant="outline"
                    size="sm"
                    className="border-red-200 text-red-700 hover:bg-red-50"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Preview Dialog */}
      <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <FileText className="w-5 h-5 text-blue-600" />
              {selectedPresentation?.title}
            </DialogTitle>
          </DialogHeader>
          
          {selectedPresentation && (
            <div className="space-y-6 mt-4">
              {selectedPresentation.content.slides.map((slide, index) => (
                <div key={index} className="border-2 border-slate-200 rounded-xl p-6 bg-gradient-to-r from-white to-slate-50">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                      {index + 1}
                    </div>
                    <h3 className="text-xl font-bold text-slate-800">{slide.title}</h3>
                  </div>
                  <ul className="space-y-2 text-slate-700 ml-4">
                    {slide.bullets.map((bullet, i) => (
                      <li key={i} className="flex items-start gap-3">
                        <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                        <span className="leading-relaxed">{bullet}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default SavedPresentations;
